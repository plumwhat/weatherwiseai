name: iOS CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_to_testflight:
        description: 'Deploy to TestFlight'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm/
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
      
      - name: Run unit tests
        run: |
          xcodebuild test \
            -workspace ios/WeatherWiseAI.xcworkspace \
            -scheme WeatherWiseAI \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -testPlan WeatherWiseAITests \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=NO
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            **/TestResults.xcresult
            **/test-output.xml

  build:
    name: Build App
    runs-on: macos-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_testflight == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm/
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
      
      - name: Setup signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          
          # Import certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      
      - name: Setup provisioning profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          echo $BUILD_PROVISION_PROFILE_BASE64 | base64 --decode > WeatherWiseAI.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp WeatherWiseAI.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Increment build number
        run: |
          cd ios
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" WeatherWiseAI/Info.plist
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
      
      - name: Build and archive
        run: |
          xcodebuild archive \
            -workspace ios/WeatherWiseAI.xcworkspace \
            -scheme WeatherWiseAI \
            -archivePath WeatherWiseAI.xcarchive \
            -configuration Release \
            -destination generic/platform=iOS \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="WeatherWiseAI Distribution Profile" \
            CODE_SIGN_IDENTITY="iPhone Distribution"
      
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath WeatherWiseAI.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath ./build \
            -allowProvisioningUpdates
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: |
            ./build/*.ipa
            WeatherWiseAI.xcarchive
      
      - name: Upload to TestFlight
        if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_testflight == 'true'
        env:
          APPSTORE_CONNECT_USERNAME: ${{ secrets.APPSTORE_CONNECT_USERNAME }}
          APPSTORE_CONNECT_PASSWORD: ${{ secrets.APPSTORE_CONNECT_PASSWORD }}
          APPSTORE_CONNECT_TEAM_ID: ${{ secrets.APPSTORE_CONNECT_TEAM_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "./build/WeatherWiseAI.ipa" \
            --username "$APPSTORE_CONNECT_USERNAME" \
            --password "$APPSTORE_CONNECT_PASSWORD" \
            --asc-provider "$APPSTORE_CONNECT_TEAM_ID" \
            --verbose
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ WeatherWiseAI build ${{ env.BUILD_NUMBER }} successfully uploaded to TestFlight!"
          echo "Build available at: https://appstoreconnect.apple.com/apps"

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run security scan
        run: |
          # Check for hardcoded secrets
          grep -r "sk-" . --exclude-dir=.git || echo "No API keys found"
          grep -r "password" . --exclude-dir=.git --exclude="*.md" || echo "No hardcoded passwords found"
          
          # Check Firebase configuration
          if [ -f "ios/WeatherWiseAI/GoogleService-Info.plist" ]; then
            echo "‚úÖ Firebase configuration found"
          else
            echo "‚ö†Ô∏è Firebase configuration missing"
          fi
      
      - name: Check dependencies for vulnerabilities
        run: |
          cd ios
          if [ -f "Podfile.lock" ]; then
            echo "Checking CocoaPods dependencies..."
            # Add security scanning tool here if needed
          fi
